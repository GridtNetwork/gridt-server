info:
  title: The Gridt Network API
  version: 0.0.0
  description: Interact with the gridt network via this API. It provides several endpoints for creating, subscribing. 
  contact:
    url: gridt.org
    name: Robin A. Dorstijn
    email: robin@gridt.org
paths:
  /auth:
    post:
      summary: Login to the gridt network
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Robin
                password:
                  type: string
                  example: SuperSecretPassword
      responses:
        200:
          description: Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access-token:
                    type: string
                    example: >-
                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6MSwiaWF0IjoxNDQ0OTE3NjQwLCJuYmYiOjE0NDQ5MTc2NDAsImV4cCI6MTQ0NDkxNzk0MH0.KPmI6WSjRjlpzecPvs3q_T3cJQvAgJvaQAPtk1abC_E"
        401:
          description: Failed to login, incorrect credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /register:
    post:
      summary: Register an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Robin
                password:
                  type: string
                  example: SuperSecretPassword
                email:
                  type: string
                  example: robin@gridt.org
      responses:
        201:
          description: Sucessfully created an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        400:
          description: >-
            Invalid request, either not all required fields are available, or the username is already in use. Check the message to find out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /movements:
    get:
      summary: List of all movements
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movements'
          description: Succesful response
      description: 'Lists all movements on the server.'
    post:
      summary: Create a new movement
      responses:
        '201':
          description: Sucessfully created the new movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movement'
        400:
          description: Could not create movement, because it already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
      requestBody:
        description: Description of the movement that is to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movement'
  /movements/{movementId}:
    get:
      summary: Get a movement
      parameters:
        - $ref: '#/components/parameters/movementId'
      responses:
        200:
          description: Succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movement'
        default:
          description: Error payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /movements/{movementId}/subscriber:
    put:
      summary: Subscribe user to movement
      description: The user that is currently logged in will be added to the subscribers of this movement.
      parameters:
      - $ref: '#/components/parameters/movementId'
      responses:
        200:
          description: Sucessfully subscribed to this movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        400:
          description: This movement does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
    delete:
      summary: Unsubscribe user from movement
      description: The user that is currently logged in will be removed from the movement subscribers
      parameters:
      - $ref: '#/components/parameters/movementId'
      responses:
        200:
          description: Sucessfully unsubscribed from this movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        400:
          description: This movement does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT 
  parameters:
    movementId:
      required: true
      in: path
      name: movementId
      description: Name or id of a movement.
      schema:
        $ref: '#/components/schemas/id'
  schemas:
    message:
      type: object
      properties:
        message:
          type: string
          example: Not found
      title: Message from the server
    movements:
      items:
        $ref: '#/components/schemas/movement'
      type: array
      title: List of movements
    id:
      title: Identifier
      oneOf:
        - type: integer
        - type: string
      description: identifier, can be it's name or an id.
      example: 1
    movement:
      title: A single movement
      type: object
      properties:
        name:
          type: string
          description: Name of the movement
          example: flossing
        interval-days:
          type: integer
          description: >-
            Amount of days in between which a follower of this movement is
            expected to perform the action
          example: 1
        short-description:
          type: string
          description: A comprehensive description of the movement
          example: Flossing once a day keeps the dentist away.
        long-description:
          type: string
          description: >-
            A much longer description that is used to 'sell' a movement to it's
            users.
          example: >-
            Flossing once a day has been shown to reduce almost any dental issue
            and can greatly reduce risks for all kinds of diseases.
        interval-weeks:
          type: integer
          description: >-
            Amount of weeks in between which a follower of this movement is
            expected to perform the action.
          example: 0
        interval-hours:
          type: integer
          description: >-
            Amount of hours in between which a follower of this movement is
            expected to perform the action.
          example: 0
        interval-months:
          type: integer
          description: >-
            Amount of months in between which a follower of this movement is
            expected to perform the action.
openapi: 3.0.2
externalDocs:
  url: 'http://gridt-server.readthedocs.io'
  description: Complete documentation of models and resources.
servers: []
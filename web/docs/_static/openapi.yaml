info:
  title: The Gridt Network API
  version: "0.0.5"
  description: >-
    Interact with the gridt network via this API. It provides several endpoints
    for creating and subscribing (to) movements and switching leaders.
  contact:
    url: gridt.org
    name: Robin A. Dorstijn
    email: robin@gridt.org
paths:
  /auth:
    post:
      summary: Login to the gridt network using the email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: robin@gridt.org
                password:
                  type: string
                  example: SuperSecretPassword
      responses:
        '200':
          description: Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: >-
                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6MSwiaWF0IjoxNDQ0OTE3NjQwLCJuYmYiOjE0NDQ5MTc2NDAsImV4cCI6MTQ0NDkxNzk0MH0.KPmI6WSjRjlpzecPvs3q_T3cJQvAgJvaQAPtk1abC_E"
        '401':
          description: 'Failed to login, incorrect credentials.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /register:
    post:
      summary: Register an account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: Robin
                password:
                  type: string
                  example: SuperSecretPassword
                email:
                  type: string
                  example: robin@gridt.org
      responses:
        '201':
          description: Sucessfully created an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: >-
            Invalid request, either not all required fields are available, or
            the username is already in use. Check the message to find out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /identity:
    get:
      summary: Check the identity of current user.
      responses:
        '200':
          description: >-
            This will return the current user's id, username, bio and avatar. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The user's id
                    example: 1021031
                  username:
                    type: string
                    description: The user's username
                    example: robin
                  bio:
                    type: string
                    description: Small biography describing the user.
                    example: >-
                      I am Robin, a code, musician and physics student. I love spending
                      time with my wife, she is awesome! Soon my first child will be born, I am 
                      curious how that will be for me.
                  email:
                    type: string
                    description: User's email
                    example: robin@gridt.org
                  avatar:
                    type: string
                    description: User's gravatar
                    example: 0f1d8086585c2580e6f2231886ba5e38
        '400':
          description: User is not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /change_password:
    post:
      summary: Change the current user's password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: SuperSecretPassword
                new_password:
                  type: string
                  example: NewSuperSecretPassword
      responses:
        '200':
          description: Successfully changed current user's password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: >-
            No old password given OR no new password given
            OR wrong old password given.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /change_email:
    post:
      summary: Change the current user's email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: SuperSecretPassword
                new_email:
                  type: string
                  example: robin@gridt.org
      responses: 
        '200':
          description: Succesfully changed current user's email.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/message'
        '400':
          description: >-
            No password or new email given
            OR wrong password given
            OR email invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /movements:
    get:
      summary: List of all movements
      description: Lists all movements on the server.
      responses:
        '200':
          description: Succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movements'
    post:
      summary: Create a new movement
      responses:
        '201':
          description: Sucessfully created the new movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: >-
            Interval must be nonzero. Or: Could not create movement, because
            movement name is already in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        description: Description of the movement that is to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movement'
  /movements/subscriptions:
    get:
      summary: Movements the user is subscribed to.
      description: >
        This will return a list of all the movements this user is subscribed to
        and all his leaders in this movements. This is the **only** place where
        the information of his leader can be obtained.
      responses:
        '200':
          description: Succesfully found the leaders of this user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/movement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /movements/{movementId}:
    get:
      summary: Get a movement
      parameters:
        - $ref: '#/components/parameters/movementId'
      responses:
        '200':
          description: Succesful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/movement'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MovementNotFoundError'
  /movements/{movementId}/subscriber:
    put:
      summary: Subscribe user to movement
      description: >-
        The user that is currently logged in will be added to the subscribers of
        this movement.
      parameters:
        - $ref: '#/components/parameters/movementId'
      responses:
        '200':
          description: Sucessfully subscribed to this movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MovementNotFoundError'
    delete:
      summary: Unsubscribe user from movement
      description: >-
        The user that is currently logged in will be removed from the movement
        subscribers
      parameters:
        - $ref: '#/components/parameters/movementId'
      responses:
        '200':
          description: Sucessfully unsubscribed from this movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MovementNotFoundError'
  /movements/{movementId}/leader:
    post:
      summary: Find a leader
      description: 'If the user has any empty leader, find one for him.'
      parameters:
        - $ref: '#/components/parameters/movementId'
        - name: userId
          in: path
          required: true
          description: Identifier (name or id) of the leader that is to be replaced.
          schema:
            $ref: '#/components/schemas/userId'
      responses:
        '201':
          description: 'Succesfully found leaders, returns the new leader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: >-
            User is not subscribed to this movement. Or: This user has no more
            space for more leaders.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: No leader found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /movements/{movementId}/leader/{userId}/:
    get:
      summary: Get the profile of this leader
      description: >-
        Obtain the information that the leader has shared in this movement.
        Among others this will display a recent message history and a biography.
      parameters:
        - $ref: '#/components/parameters/movementId'
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/userId'
      responses:
        '200': 
          description: >
            Leader profile found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Identifier
                    type: number
                  username:
                    description: Non-unique identifier for the user
                    type: string
                  bio:
                    description: Short biography from the user 
                    type: string
                  message_history:
                    description: List detailing the last 3 messages the user has sent.
                    type: array
                    items:
                      $ref: '#/components/schemas/signal'
        '400':
          description: >-
            User is not subscribed to this movement. Or: User is not following
            this leader.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Swap leader in movement
      description: Swap a leader in a movement with a different one.
      parameters:
        - $ref: '#/components/parameters/movementId'
        - name: userId
          in: path
          required: true
          description: Identifier (name or id) of the leader that is to be replaced.
          schema:
            $ref: '#/components/schemas/userId'
      responses:
        '201':
          description: 'Succesfully swapped leaders, returns the new leader'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: >-
            User is not subscribed to this movement. Or: User is not following
            this leader.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Could not find leader to replace the current one.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
  /movements/{movementId}/signal:
    post:
      summary: Post a new signal in movement
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message: 
                  type: string
                  description: Optional message that the leader can send with his signal
      description: >
        Tell the server that the user has performed the action related to this
        movement.
      parameters:
        - $ref: '#/components/parameters/movementId'
      responses:
        '201':
          description: Successfully created signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400':
          description: User is not subscribed to this movement.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/MovementNotFoundError'
  /bio:
    put:
      summary: Update the user bio
      description: Permanently change the bio of this user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - bio
              properties:
                bio:
                  type: string
      responses:
        '200': 
          description: Update successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '400': 
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/message'
    MovementNotFoundError:
      description: This movement does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/message'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    movementId:
      required: true
      in: path
      name: movementId
      description: Name or id of a movement.
      schema:
        $ref: '#/components/schemas/id'
  schemas:
    message:
      type: object
      properties:
        message:
          type: string
          example: Not found
      title: Message from the server
    movements:
      items:
        $ref: '#/components/schemas/movement'
      type: array
      title: List of movements
    id:
      title: Identifier
      oneOf:
        - type: integer
        - type: string
      description: 'identifier, can be it''s name or an id.'
      example: 1
    movement:
      title: Basic movement
      type: object
      required:
        - name
        - short_description
        - interval
      properties:
        name:
          type: string
          description: Name of the movement
          minLength: 4
          maxLength: 50
          example: flossing
        subscribed:
          type: boolean
          description: True if the user is subscribed to this movement.
          minLength: 10
          maxLength: 100
          example: true
        leaders:
          type: array
          items:
            $ref: '#/components/schemas/user'
        short_description:
          type: string
          description: A comprehensive description of the movement
          example: Flossing once a day keeps the dentist away.
        description:
          type: string
          description: >-
            A much longer description that is used to 'sell' a movement to it's
            users.
          example: >-
            Flossing once a day has been shown to reduce almost any dental issue
            and can greatly reduce risks for all kinds of diseases.
        interval:
          type: string 
          description: >-
            Describes how often the movement timer gets reset.
          enum:
            - daily
            - twice daily
            - weekly  
    user:
      title: User
      type: object
      properties:
        id:
          type: integer
          description: The user's id
          example: 1021031
        username:
          type: string
          description: The user's username
          example: robin
        bio:
          type: string
          description: Small biography describing the user.
          example: >-
            I am Robin, a code, musician and physics student. I love spending
            time with my wife, she is awesome! Soon my first child will be born, I am 
            curious how that will be for me.
        last_signal:
          $ref: '#/components/schemas/signal'
        avatar:
          type: string
          description: User's gravatar
          example: 0f1d8086585c2580e6f2231886ba5e38
    userId:
      title: User id
      oneOf:
        - type: integer
        - type: string
    signal:
      title: Signal
      description: >
        A signal that a leader can send to the server to communicate that he has performed the by the movement required action.
      type: object
      required:
        - time_stamp
      properties:
        time_stamp:
          type: string
          description: Datetime with timezone in ISO format detailing when the server received the signal.
        message:
          type: string
          description: Optional message that the user can send with the time stamp.
openapi: 3.0.1
externalDocs:
  url: 'http://gridt-server.readthedocs.io'
  description: Complete documentation of models and resources.
servers: 
  - url: http://api.gridt.org/